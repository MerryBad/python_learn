import pandas as pd
import tensorflow as tf
from sklearn import model_selection
import numpy as np
# 보스턴 주택가격 데이터를 pandas로 읽어오기

boston=pd.read_excel('Data/BostonHousing.xls')
# print(boston)

# 보스턴 데이터로부터 x, y 데이터 구축하기
# # x=boston.values[:,:-1]
# y=boston.MEDV.values.reshape(-1,1)
# x=boston.drop(['MEDV'], axis=1).values
# # print(x.shape)
# # print(y.shape)

values=boston.values

x=values[:,:-1]
y=values[:,-1:]
# print(x.shape) #(506, 13)
# print(y.shape) #(506, 1)

# 마지막데이터를 제외한 데이터로 학습하고, 마지막 데이터 1개에 대해 예측하기
# x_train, x_test = x[:-1], x[-1:]
# y_train, y_test = y[:-1], y[-1:]

#70%로 학습, 30% 예측
data=model_selection.train_test_split(x,y,train_size=0.7)
x_train, x_test, y_train, y_test = data

# x_test=values[-1:,:-1]
# y_test=values[-1:,-1:]
# print(x_test.shape)
# print(y_test.shape)

# MultipleRegression을 이용해서 학습

w = tf.Variable(tf.random_uniform([x.shape[1],1]))
b = tf.Variable(tf.random_uniform([1]))

ph_x = tf.placeholder(tf.float32)

hx = tf.matmul(ph_x,w) + b

loss_i = (hx - y_train) ** 2
loss = tf.reduce_mean(loss_i)

optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.00000318)
train = optimizer.minimize(loss=loss)

sess = tf.Session()
sess.run(tf.global_variables_initializer())

for i in range(1000):
    sess.run(train, feed_dict={ph_x: x_train})
    print(i, sess.run(loss, feed_dict={ph_x: x_train}))

preds = sess.run(hx, {ph_x:x_test})
print(preds.shape)
print(y_test.shape)

preds_1=preds.reshape(-1)
y_test_1=y_test.reshape(-1)
diff=preds_1-y_test_1
print(diff[:5])
print("평균 오차 : {}달러".format(int(np.mean(np.abs(diff))*1000)))

sess.close()